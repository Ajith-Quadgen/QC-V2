<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        Root Home
    </title>
    <%- include('../partials/dependencies') %>
</head>
<div class="loader" id="loader">
    <div class="cycles">
        <div id="cycle1" class="cycle"></div>
        <div id="cycle2" class="cycle"></div>
        <div id="cycle3" class="cycle"></div>
        <div id="cycle4" class="cycle"></div>
        <div id="cycle5" class="cycle"></div>
    </div>
    <div class="loadng-label">Loading Assets...</div>
</div>

<body>
    <header>

        <%- include('../partials/root-header',{title:title}) %>

    </header>

    <main class="d-flex flex-column mb-3 justify-content-center w-100"
        style="position: absolute; top: 100px; align-self: baseline;">
        <section class="d-flex justify-content-between flex-wrap">
            <div style="height: 200px; width: 200px;">
                <canvas id="UserChart"></canvas>
            </div>
            <div class="profile-card d-flex flex-row " style="max-height: 110px;">
                <div class="right-side">
                    <i class="bi bi-person-badge"></i>
                </div>
                <div class="left-side">
                    <figure>
                        <blockquote class="blockquote" style="font-size: 14px;">
                            <p>
                                <%= User.Full_Name %>
                            </p>
                        </blockquote>
                        <figcaption class="blockquote-footer" style="font-size: 12px;">
                            <%= User.Designation %> (<%= User.Employee_ID %>) <br>
                                    <i class="bi bi-envelope-at-fill"></i>
                                    <%= User.Email_ID %><br>
                                        <i class="bi bi-geo-alt-fill"></i>
                                        <%= User.Location %>
                                            <p>RM: <%= User.Reporting_Manager_Name %>
                                            </p>

                        </figcaption>
                    </figure>
                </div>
            </div>

        </section>
        <section class="d-flex justify-content-end flex-wrap">
            <div class="profile-card m-2"
                style="position: relative;  height: 260px; overflow: auto;box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;">
                <div class="d-flex justify-content-between sticky-top bg-danger bg-gradient ">
                    <h5 class=" rounded-top text-center w-100">Notifications</h5>

                    <button type="button" class="btn btn-outline-dark border border-0" data-bs-toggle="modal"
                        data-bs-target="#UserInputModel"><i class="bi bi-pencil-square"></i></button>
                </div>
                <ol>
                    <% notifications.forEach(function(record) { %>
                        <li style="width: 400px; word-wrap: break-word;">

                            <span>
                                <%= record.Message %> <em>( <%= record.N_Start_Date %> - <%= record.N_End_Date %>)</em><button type="button" class="btn btn-outline-danger btn-sm m-1"
                                        onclick="deleteNotification('<%- record.Notifications_ID %>')"><i
                                            class="bi bi-trash"></i></button>
                            </span><hr>
                        </li>
                        <% }); %>
                </ol>

            </div>
        </section>
    </main>
    <div class="modal fade" id="UserInputModel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content ">
                <div class="modal-header">
                    <h3 class="modal-title fs-5 " id="staticBackdropLabel">Notifications
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form action="#" method="post" id="Add_Notification_Form">
                    <div class="modal-body">
                        <div class="form-floating mb-3">
                            <textarea class="form-control" id="Message" placeholder="key" required></textarea>
                            <label for="Message">Message</label>
                        </div>
                        <div class="row">
                            <div class=" col form-floating mb-3">
                                <input type="datetime-local" class="form-control" id="start_date" placeholder="key"
                                    required>
                                <label for="start_date">Start Date</label>
                            </div>
                            <div class="col form-floating mb-3">
                                <input type="datetime-local" class="form-control" id="end_Date" placeholder="key"
                                    required>
                                <label for="end_Date">End Date</label>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" id="Add_Notification">Add &nbsp;<i
                                class="bi bi-send-fill"></i></button>
                    </div>
                </form>
            </div>
        </div>
    </div>


</body>
<%- include('../partials/dependencies-js') %>
    <script>
        const ctx = document.getElementById('UserChart');
        const xValues = ['Active Users', 'In-Active Users']
        const yValues = ['<%= UserCount.active_user %>', '<%-UserCount.inactive_users %>'];
        console.log(xValues, yValues)
        const barColors = [
            "#2b5797",
            "#e8c3b9",
            "#1e7145"
        ];
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: xValues,
                datasets: [{
                    label: 'User Count',
                    data: yValues,
                    background: barColors
                }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "User Counts"
                }
            }
        });
        window.addEventListener('DOMContentLoaded', (event) => {
            const start_date = document.getElementById("start_date");
            const end_Date = document.getElementById("end_Date");
            // Get the current date and time
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = String(currentDate.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            const currentDay = String(currentDate.getDate()).padStart(2, '0');
            const currentHour = String(currentDate.getHours()).padStart(2, '0');
            const currentMinute = String(currentDate.getMinutes()).padStart(2, '0');

            // Set the input's min attribute to the current date and time
            start_date.min = `${currentYear}-${currentMonth}-${currentDay}T${currentHour}:${currentMinute}`;
            end_Date.min = `${currentYear}-${currentMonth}-${currentDay}T${currentHour}:${currentMinute}`;


            document.getElementById("Add_Notification").addEventListener('click', async (e) => {
                e.preventDefault();
                if (new Date(end_Date.value).getTime() - new Date(start_date.value).getTime() >= 300000) {
                    const Message = document.getElementById("Message").value;
                    if (Message.length > 20) {
                        await axios.post('/api/addNotification', {
                            params: {
                                Message: Message,
                                Start_Date: start_date.value,
                                End_Date: end_Date.value
                            }
                        }).then(res => {
                            $("#UserInputModel").modal('hide')
                            if (res.status == 200) {
                                alert(res.data.Message);
                            }
                            window.location.reload()
                        }).catch(e => {
                            console.log(e);
                            alert(e.response.data.Message);
                        })
                    } else {
                        alert("The Message is too small.")
                    }

                } else {
                    alert("Invalid Time Frame...\nThe Minimum Time Frame is 5min.")
                }
            })
        });
        async function deleteNotification(id) {
            await axios.post('/api/deleteNotification', {
                params: {
                    ID: id
                }
            }).then(res => {
                if (res.status == 200) {
                    alert(res.data.Message);
                }
                window.location.reload()
            }).catch(e => {
                console.log(e);
                alert(e.response.data.Message);
            })
        }
    </script>

</html>
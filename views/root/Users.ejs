<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users</title>
    <%- include('../partials/dependencies') %>
</head>

<body>
    <header>
        <%- include('../partials/root-header',{title:title}) %>
    </header>
    <main class="main_container">
        <form action="#" method="POST" enctype="multipart/form-data" id="userExcelUploadForm"
            class="d-flex justify-content-center align-items-center">
            <div class="input-group m-2" style="width: max-content;">
                <input type="text" class="form-control" placeholder="Enter Name/Employee-ID"
                    aria-label="Recipient's username" aria-describedby="FilterBtn" id="SearchBox">
                <button class="btn btn-success" type="button" id="FilterBtn"><i class="bi bi-search"></i></button>
            </div>
            <p class="form-label">Select Only CSV File</p>
            <label class="input-group-text" for="UserExcelFile">Select User Data</label>
            <input type="file" class="form-control m-2" name="UserExcelFile" id="UserExcelFile" accept=".csv" required
                style="display: none;">
            <button type="submit" class="btn btn-primary m-2">Upload &nbsp; <i
                    class="bi bi-cloud-arrow-up"></i></button>
            <input type="button" value="Add New User" class="btn btn-outline-primary m-2" data-bs-toggle="modal"
                data-bs-target="#UserInputModel">
        </form>
        <div class="d-flex ">
            <table class="table table-hover AVRTable caption-top" style="font-size: 14px;">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Sl.No</th>
                        <th scope="col">Employee ID</th>
                        <th scope="col">Employee Name</th>
                        <th scope="col">Email</th>
                        <th scope="col">Designation</th>
                        <th scope="col">Location</th>
                        <th scope="col">Role</th>
                        <th scope="col">No of Submission</th>
                        <th scope="col">Reporting Manager</th>
                        <th scope="col">Added/Updated By</th>

                        <th scope="col">Last Seen</th>
                        <th scope="col" colspan="2">Status</th>
                        <th scope="col"></th>

                    </tr>
                </thead>
                <tbody id="content-area" style="font-size: 14px;">
                    <% if (Object.values(Data).length>0) { %>
                        <% for( let index=0; index < Object.values(Data).length; index++ ) { %>
                            <tr ondblclick="getUserDetails('<%= Data[index][`Employee_ID`] %>')"
                                style="cursor:pointer;">
                                <td>
                                    <%= index+1%>
                                </td>
                                <td>
                                    <%= Data[index]["Employee_ID"] %>
                                </td>
                                <td class="text-start">
                                    <%= Data[index]['Full_Name'] %>
                                </td>
                                <td class="text-start">
                                    <%= Data[index]['Email_ID'] %>
                                </td>
                                <td class="text-start">
                                    <%= Data[index]['Designation'] %>
                                </td>
                                <td class="text-start">
                                    <%= Data[index]['Location'] %>
                                </td>
                                <td class="text-start">
                                    <%= Data[index]['Role'] %>
                                </td>
                                <td>
                                    <%= Data[index]['No_of_Submission'] %>
                                </td>
                                <td class="text-start">
                                    <%= Data[index]['Reporting_Manager_Name'] %>
                                </td>
                                <td class="text-start">
                                    <%= Data[index]['Added_By'] %>
                                </td>
                                <td>
                                    <%= Data[index]['lastSeen'] %>
                                </td>
                                <td>
                                    <% if (Data[index]['Active']) { %>
                                        Active
                                        <% }else{ %>
                                            Inactive
                                            <% }%>
                                </td>

                                <td>
                                    <% if (Data[index]['Active']=='0' ) { %>
                                        <button type="button" class="btn btn-success btn-sm ms-2 me-2"
                                            onclick="updateStatusAPI('<%= Data[index][`Employee_ID`] %>','1')"><i
                                                class="bi bi-check-circle-fill"></i></button>
                                        <% }else{%> <button type="button" class="btn btn-danger btn-sm ms-2"
                                                onclick="updateStatusAPI('<%= Data[index][`Employee_ID`] %>','0')"><i
                                                    class="bi bi-x-circle"></i></button>
                                            <% } %>

                                </td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger btn-sm ms-2 me-2"
                                        onclick="DeleteUser('<%= Data[index][`Employee_ID`] %>','1')"><i
                                            class="bi bi-trash"></i></button>
                                </td>

                            </tr>
                            <% } %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="11">
                                            <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                                                <symbol id="check-circle-fill" viewBox="0 0 16 16">
                                                    <path
                                                        d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                                                </symbol>
                                                <symbol id="info-fill" viewBox="0 0 16 16">
                                                    <path
                                                        d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
                                                </symbol>
                                                <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
                                                    <path
                                                        d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                                                </symbol>
                                            </svg>
                                            <div class="alert alert-warning alert-dismissible fade show d-flex align-items-center"
                                                role="alert">
                                                <svg class="bi flex-shrink-0 me-2" role="img" aria-label="Info:">
                                                    <use xlink:href="#info-fill" />
                                                </svg>

                                                <strong>Sorry...!ðŸ˜•</strong> Data not found.
                                                <button type="button" class="btn-close" data-bs-dismiss="alert"
                                                    aria-label="Close"></button>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="9" class="text-center">

                                            <a href="/login" class="btn btn-outline-primary rounded-pill"><i
                                                    class="bi bi-arrow-left-circle-fill"></i> Go Back To Home</a>

                                        </td>
                                    </tr>
                                    <% } %>
                </tbody>
            </table>
        </div>
    </main>
    <!-- Add New User Model -->
    <div class="modal fade" id="UserInputModel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content ">
                <div class="modal-header">
                    <h3 class="modal-title fs-5" id="staticBackdropLabel">Add New User
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form action="/api/AddUser" method="post" id="addUserForm">
                    <div class="modal-body">
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="empId" placeholder="key" required>
                            <label for="empId">Employee ID</label>
                        </div>
                        <div class="toast bg-warning align-items-center border-0 mb-3 rounded-3" id="Employee-ID_Tost"
                            role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="d-flex">
                                <div class="toast-body fs-6">
                                    This Employee-ID is already exist..!
                                </div>
                                <button type="button" class="btn-close btn-close me-2 m-auto" data-bs-dismiss="toast"
                                    aria-label="Close"></button>
                            </div>
                        </div>

                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="empName" placeholder="key" required>
                            <label for="empName">Employee Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="email" class="form-control" id="empEmail" placeholder="key" required>
                            <label for="empEmail">Email ID</label>
                        </div>
                        <div class="toast bg-warning align-items-center border-0 mb-3 rounded-3"
                            id="Employee-Email_Tost" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="d-flex">
                                <div class="toast-body fs-6">
                                    This Email is already exist..!
                                </div>
                                <button type="button" class="btn-close btn-close me-2 m-auto" data-bs-dismiss="toast"
                                    aria-label="Close"></button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="empDesignation" class="mb-3">Designation</label>
                            <select name="empDesignation" id="empDesignation" class="from-select form-control"
                                aria-label="Select" required>
                                <option selected value="">Select the Designation</option>
                                <% Basic.Designation.forEach(element=> { %>
                                    <option value="<%= element %>">
                                        <%= element %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="empLocation" class="mb-2">Location</label>
                            <select name="empLocation" id="empLocation" class="from-select form-control"
                                aria-label="Select" required>
                                <option selected value="">Select the Location</option>
                                <% Basic.Location.forEach(element=> { %>
                                    <option value="<%= element %>">
                                        <%= element %>
                                    </option>
                                    <% }) %>
                            </select>

                        </div>
                        <div class="mb-3">
                            <label for="empRole" class="mb-2">Role</label>
                            <select name="empRole" id="empRole" class="from-select form-control" aria-label="Select"
                                required>
                                <option selected value="">Select the Role</option>
                                <% Basic.Roles.forEach(element=> { %>
                                    <option value="<%= element %>">
                                        <%= element %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="empReportingManager" class="mb-2">Reporting Manager</label>
                            <select name="empReportingManager" id="empReportingManager" class="from-select form-control"
                                aria-label="Select" required>
                                <option selected value="">Select the Reporting Manager</option>
                                <% Basic.NameMail.forEach(record=> { %>
                                    <option value="<%= record.Employee_ID %>">
                                        <%= record.Full_Name %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                    </div>
                    <div class="ChecklistArea1" id="ChecklistArea1">

                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" id="AddEmployeebtn">Add &nbsp;<i
                                class="bi bi-send-fill"></i></button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <!-- Update User Model -->
    <div class="modal fade" id="UserUpdateModel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content ">
                <div class="modal-header">
                    <h3 class="modal-title fs-5" id="staticBackdropLabel">Update User Details
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form action="/api/UpdateUserDetails" method="post" id="UpdateUserForm">
                    <div class="modal-body">
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="u-empId" placeholder="key">
                            <label for="u-empId">Employee ID</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="u-empName" placeholder="key">
                            <label for="u-empName">Employee Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="email" class="form-control" id="u-empEmail" placeholder="key">
                            <label for="u-empEmail">Email ID</label>
                        </div>
                        <div class="mb-3">
                            <label for="u-empDesignation">Designation</label>
                            <select name="u-empDesignation" id="u-empDesignation" class="from-select form-control"
                                aria-label="Select" required>
                                <option selected>Select the Designation</option>
                                <% Basic.Designation.forEach(element=> { %>
                                    <option value="<%= element %>">
                                        <%= element %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="u-empLocation">Location</label>
                            <select name="u-empLocation" id="u-empLocation" class="from-select form-control"
                                aria-label="Select" required>
                                <option selected>Select the Location</option>
                                <% Basic.Location.forEach(element=> { %>
                                    <option value="<%= element %>">
                                        <%= element %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="u-empRole">Role</label>
                            <select name="u-empRole" id="u-empRole" class="from-select form-control" aria-label="Select"
                                required>
                                <option selected>Select the Role</option>
                                <% Basic.Roles.forEach(element=> { %>
                                    <option value="<%= element %>">
                                        <%= element %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" id="u-empReportingManager" class="form-control" placeholder="key"
                                readonly required>
                            <label for="u-empReportingManager">Reporting Manager: </label>
                        </div>
                        <div class="mb-3">
                            <input type="hidden" name="" id="u-empReportingManagerID" placeholder="key" required
                                value="">
                            <select name="u-empReportingManager" class="from-select form-control"
                                id="ReportingMangerSelect" aria-label="Select">
                                <option selected>Select the new Reporting Manager</option>
                                <% Basic.NameMail.forEach(record=> { %>
                                    <option value="<%= record.Email_ID %>">
                                        <%= record.Full_Name %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>
                    </div>
                    <div class="ChecklistArea" id="ChecklistArea">

                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" id="UpdateEmployeebtn">Update &nbsp;<i
                                class="bi bi-send-fill"></i></button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <%- include('../partials/dependencies-js') %>
        <script>
            $(document).ready(function () {

            });
            document.getElementById("ReportingMangerSelect").addEventListener("change", (e) => {
                const select = e.target;
                document.getElementById('u-empReportingManager').value = select.options[select.selectedIndex].text;
                document.getElementById('u-empReportingManagerID').value = select.value;
            })
            document.getElementById('addUserForm').addEventListener("submit", async (e) => {
                e.preventDefault();
                await axios.post('/api/AddUser', {
                    params: {
                        "Employee_ID": document.getElementById("empId").value,
                        "Full_Name": document.getElementById("empName").value,
                        "Email_ID": document.getElementById("empEmail").value,
                        "Designation": document.getElementById("empDesignation").value,
                        "Location": document.getElementById("empLocation").value,
                        "Role": document.getElementById("empRole").value,
                        "Reporting_Manager_ID": document.getElementById("empReportingManager").value,

                    }
                }).then(res => {
                    if (res.status == 200) {
                        $("#UserInputModel").modal('hide')
                        updateContentArea(res.data.Data);
                        alert(res.data.Message);
                        document.getElementById("addUserForm").reset();
                    }
                }).catch(e => {
                    // $("#UserInputModel").modal('hide')
                    console.log(e);
                    alert(e.response.data.Message);
                })
            })
            document.getElementById('userExcelUploadForm').addEventListener("submit", async (e) => {
                e.preventDefault();
                const fileInput = document.getElementById('UserExcelFile');
                const file = fileInput.files[0];
                let fromData = new FormData();
                fromData.append("UserExcelFile", file)
                await axios.post('/api/uploadUsers', fromData).then(res => {
                    if (res.status == 200) {
                        alert(res.data.Message);
                        updateContentArea(res.data.Data);
                    }
                }).catch(e => {
                    alert(e.response.data.Message);
                })
            })

            function updateStatusAPI(id, newStatus) {
                axios.post('/api/updateUserStatus', {
                    params: {
                        id: id,
                        status: newStatus
                    }
                }).then(res => {
                    if (res.status == 200) {
                        updateContentArea(res.data);
                    }
                })
                    .catch(e => {
                        console.log(e);
                        alert(e.message)
                        alert("Unable to Update the Status...\nPlease Contact Admin");
                    })
            }

            function getUserDetails(userId) {
                $("#UserUpdateModel").modal("show")
                axios.get('/api/getUserDetails', {
                    params: {
                        UserID: userId
                    }
                }).then(res => {
                    if (res.status == 200) {

                        let groupedData = groupBy(res.data.Checklist, "Customer");
                        $('#ChecklistArea').empty();
                        let area = document.getElementById("ChecklistArea");
                        area.classList.add("form-check", "form-switch", "form-check-inline", "m-1")
                        const title = document.createElement("h5");
                        title.textContent = "Checklist Accessibility";
                        area.appendChild(title)
                        if (Object.values(groupedData).length > 0) {
                            for (const key in groupedData) {
                                if (groupedData.hasOwnProperty(key)) {
                                    const coverDiv = document.createElement('div');
                                    const flexDiv = document.createElement('div');
                                    flexDiv.classList.add("m-2")
                                    coverDiv.classList.add("d-flex", "justify-content-center")
                                    const checkbox = document.createElement('input');
                                    checkbox.classList.add("form-check-input", "master-checkbox")
                                    checkbox.type = 'checkbox';
                                    checkbox.name = 'checklist';
                                    checkbox.value = key;
                                    checkbox.id = key;
                                    checkbox.addEventListener('change', handleParentCheckboxChange);
                                    const label = document.createElement('label');
                                    label.textContent = key;
                                    label.setAttribute('for', key);
                                    label.classList.add("form-check-label")
                                    const hr = document.createElement('hr');
                                    flexDiv.appendChild(label);
                                    flexDiv.appendChild(checkbox);
                                    coverDiv.appendChild(hr)
                                    coverDiv.appendChild(flexDiv)
                                    area.appendChild(coverDiv);
                                    area.appendChild(hr);
                                    const outerDiv = document.createElement('div');
                                    groupedData[key].forEach(item => {
                                        const innerDiv = document.createElement('div');
                                        innerDiv.classList.add("form-check", "form-switch", "form-check-inline", "m-2")
                                        const checkbox = document.createElement('input');
                                        checkbox.classList.add("form-check-input")
                                        checkbox.type = 'checkbox';
                                        checkbox.name = key;
                                        checkbox.value = item.Checklist_Name;
                                        checkbox.id = `CheckList_${item.Checklist_Name}`;
                                        checkbox.addEventListener("change", handleChildCheckboxChange)
                                        const label = document.createElement('label');
                                        label.textContent = item.Checklist_Name;
                                        label.setAttribute('for', item.Checklist_Name);
                                        label.classList.add("form-check-label")
                                        innerDiv.appendChild(checkbox);
                                        innerDiv.appendChild(label);
                                        outerDiv.appendChild(innerDiv)
                                    });

                                    area.appendChild(outerDiv);

                                }
                            }
                        } else {
                            console.log("No Checklist")
                        }
                        document.getElementById("u-empId").value = res.data.UserData.Employee_ID;
                        document.getElementById("u-empName").value = res.data.UserData.Full_Name;
                        document.getElementById("u-empEmail").value = res.data.UserData.Email_ID;
                        document.getElementById("u-empDesignation").value = res.data.UserData.Designation;
                        document.getElementById("u-empLocation").value = res.data.UserData.Location;
                        document.getElementById("u-empRole").value = res.data.UserData.Role;
                        document.getElementById("u-empReportingManagerID").value = res.data.UserData.Reporting_Manager_Mail;
                        document.getElementById("u-empReportingManager").value = res.data.UserData.Reporting_Manager_Name;

                        const allCheckboxes = document.querySelectorAll('input[id^="CheckList_"]');
                        if (res.data.UserData.Access) {
                            const valuesToCheck = res.data.UserData.Access.split(",")
                            allCheckboxes.forEach(checkbox => {
                                const isChild = valuesToCheck.includes(checkbox.value);
                                if (isChild) {
                                    checkbox.checked = true;
                                    const parentCheckbox = document.getElementById(checkbox.name);
                                    if (parentCheckbox) {
                                        parentCheckbox.checked = true;
                                    }
                                }
                            });
                        }
                    }
                }).catch(e => {
                    console.log(e);
                    alert(e.message)
                })
            }

            function groupBy(array, key) {
                return array.reduce((result, obj) => {
                    const keyValue = obj[key];
                    if (!result[keyValue]) {
                        result[keyValue] = [];
                    }
                    result[keyValue].push(obj);
                    return result;
                }, {});
            }
            // Function to handle parent checkbox state change
            function handleParentCheckboxChange(event) {
                const parentCheckbox = event.target;
                const childCheckboxes = document.querySelectorAll(`input[name="${parentCheckbox.value}"]`);

                childCheckboxes.forEach(childCheckbox => {
                    childCheckbox.checked = parentCheckbox.checked;
                });

            }
            function handleChildCheckboxChange(event) {
                const childCheckbox = event.target;
                const parentName = childCheckbox.name;

                // Find all child checkboxes with the same name attribute as the current child checkbox
                const childCheckboxes = document.querySelectorAll(`input[name="${parentName}"]`);

                // Check if any child checkbox is checked
                const anyChildChecked = Array.from(childCheckboxes).some(checkbox => checkbox.checked);

                // Get the parent checkbox by ID (assuming it has a unique ID)
                const parentCheckbox = document.getElementById(parentName);

                // Update the state of the parent checkbox based on the child checkboxes' states
                parentCheckbox.checked = anyChildChecked;
            }

            document.getElementById("UpdateUserForm").addEventListener('submit', async (e) => {
                e.preventDefault()
                const allCheckboxes = document.getElementById("UpdateUserForm").querySelectorAll('input[type="checkbox"]');
                const checkedValues = [];
                allCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        checkedValues.push(checkbox.value);
                    }
                });

                // const allCheckboxes = document.querySelectorAll('input[id^="CheckList_"]');
                // const checkedValues = Array.from(allCheckboxes)
                //     .filter(checkbox => checkbox.checked || (checkbox.type === 'checkbox' && checkbox.parentElement.querySelector('input:checked')))
                //     .map(checkbox => checkbox.value);

                await axios.post('/api/UpdateUser', {
                    params: {
                        "Employee_ID": document.getElementById("u-empId").value,
                        "Full_Name": document.getElementById("u-empName").value,
                        "Email_ID": document.getElementById("u-empEmail").value,
                        "Designation": document.getElementById("u-empDesignation").value,
                        "Location": document.getElementById("u-empLocation").value,
                        "Role": document.getElementById("u-empRole").value,
                        "Reporting_Manager_Name": document.getElementById("u-empReportingManager").value,
                        "Reporting_Manager_Mail": document.getElementById("u-empReportingManagerID").value,
                        "Access": checkedValues.toString(),
                    }
                }).then(res => {
                    if (res.status == 200) {
                        updateContentArea(res.data.Data);
                        $("#UserUpdateModel").modal('hide')
                        alert(res.data.Message);
                    }
                }).catch(e => {
                    // $("#UserUpdateModel").modal('hide')
                    console.log(e);
                    alert(e.response.data);
                })
            })
            document.getElementById("FilterBtn").addEventListener('click', async (e) => {
                const Key = document.getElementById("SearchBox").value.replaceAll(" ", "");
                var regex = /^[0-9a-zA-Z\/-]+$/
                if (regex.test(Key)) {
                    axios.get('/api/GetUser', {
                        params: {
                            key: Key
                        }
                    }).then(res => {
                        if (res.status == 200) {
                            updateContentArea(res.data);
                        }
                    })
                        .catch(e => {
                            console.log(e);
                            alert("Unable to Find the User...\nPlease Check the Details or Contact Admin");
                        })
                } else {
                    document.getElementById("SearchBox").value = null;
                    alert("Special Characters are Not Allowed...!");
                }
            })
            function updateContentArea(data) {
                if (data.length > 0) {
                    $('#content-area').empty();
                    const table = document.getElementById("content-area");
                    for (let i = 0; i < data.length; i++) {
                        table.innerHTML += `<tr ondblclick="getUserDetails('${data[i]['Employee_ID']}')" style="cursor:pointer;">
                                    <td>${i + 1}</td>
                                    <td>${data[i]["Employee_ID"]}</td>
                                    <td class="text-start">${data[i]["Full_Name"]}</td>
                                    <td class="text-start">${data[i]["Email_ID"]}</td>
                                    <td class="text-start">${data[i]["Designation"]}</td>
                                    <td class="text-start">${data[i]["Location"]}</td>
                                    <td class="text-start">${data[i]["Role"]}</td>
                                     <td>${data[i]["No_of_Submission"]}</td>
                                    <td class="text-start">${data[i]["Reporting_Manager_Name"]}</td>
                                    <td class="text-start">${data[i]["Added_By"]}</td>     
                                    <td>${data[i]["Active"] ? "Active" : "Inactive"}</td>
                                    <td>${data[i]["lastSeen"]}</td>
                                    <td>${data[i]['Active'] == '0' ?
                                `<button type="button" class="btn btn-success btn-sm ms-2 me-2" onclick="updateStatusAPI('${data[i]['Employee_ID']}','1')"><i class="bi bi-check-circle-fill"></i></button></td>` :
                                `<button type="button" class="btn btn-danger btn-sm ms-2" onclick="updateStatusAPI('${data[i]['Employee_ID']}','0')"> <i class="bi bi-x-circle"></i></button></td></tr>`}</tr>`
                    }
                }

            }

            $("#SearchBox").on("keydown", function (e) {
                if (e.keyCode === 13) {  //checks whether the pressed key is "Enter"
                    document.getElementById("FilterBtn").click()
                }
            });
            document.getElementById("empId").addEventListener("change", (e) => {
                const EmployeeID = e.target.value;
                socket.emit("Check_Employee_Exist", { ID: EmployeeID }, (response) => {
                    if (response == "Present") {
                        $("#Employee-ID_Tost").toast('show');
                        // e.target.value=null;
                    }
                });
            })
            document.getElementById("empEmail").addEventListener("change", (e) => {
                const EmployeeMail = e.target.value;
                socket.emit("Check_Employee_Exist", { ID: EmployeeMail }, (response) => {
                    if (response == "Present") {
                        $("#Employee-Email_Tost").toast('show');
                        // e.target.value=null;
                    }
                });
            })
            function DeleteUser(userID) {
                let confirm = prompt(`Are you shure you want to delete this user (${userID})...? (Yes/No)`)
                const options = ['Yes', 'YES', 'Y', 'y']
                if (options.includes(confirm)) {
                    axios.post('/root/deleteUser',
                        {
                            params: { userID: userID }
                        }).then(res => {
                            if (res.status == 200) {
                                alert(res.data.Message)
                                window.location.reload()
                            }
                        }).catch(e => {
                            alert(e.responses.data.Message)
                            window.location.reload()
                        })
                }
            }
        </script>
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Checklist</title>
    <%- include('../partials/dependencies') %>
</head>
<div class="loader" id="loader">
    <div class="cycles">
        <div id="cycle1" class="cycle"></div>
        <div id="cycle2" class="cycle"></div>
        <div id="cycle3" class="cycle"></div>
        <div id="cycle4" class="cycle"></div>
        <div id="cycle5" class="cycle"></div>
    </div>
    <div class="loadng-label">Loading Assets...</div>
</div>

<body>
    <header>
        <% if (Role=="Engineer" ) { %>
            <%- include('../partials/engineer-header',{title:title,IncludeBackButton:0}) %>
                <% }else if(Role=="Admin" ){ %>
                    <%- include('../partials/admin-header',{title:title}) %>
                        <% }else if(Role=="PMO" ){ %>
                            <%- include('../partials/PMO-header',{title:title}) %>
                                <%}else if(Role=="Root" ){ %>
                                    <%- include('../partials/root-header',{title:title}) %>
                                        <%}%>
    </header>
    <main class="main_container">
        <% if (Role=="Admin" || Role=="Root" ) { %>
            <form action="#" method="POST" enctype="multipart/form-data" id="QC-Excel-UploadForm"
                class="d-flex justify-content-center align-items-center">
                <p class="form-label">Select Only Excel File</p>
                <label class="input-group-text" for="QCFile">Select Checklist File</label>
                <input type="file" class="form-control m-2" name="QCFile" id="QCFile"
                    accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"
                    required style="display: none;">

                <button type="submit" class="btn btn-primary m-2">Upload &nbsp; <i
                        class="bi bi-cloud-arrow-up"></i></button>
                <input type="button" value="Add New Check" class="btn btn-outline-primary m-2" data-bs-toggle="modal"
                    data-bs-target="#UserInputModel">
                <% if (Checklist) { %>
                    <label class="input-group-text" for="SupportingDoc">Browse the Supporting Doc</label>
                    <input type="file" class="form-control m-2" name="SupportingDoc" id="SupportingDoc"
                        accept="application/pdf" required style="display: none;">

                    <a href="/<%=Role%>/viewResponses/<%= Checklist%>" target="_self"><button type="button"
                            class="btn btn-outline-secondary m-2">View Responses</button> </a>
                    <% } %>
            </form>
            <%}%>
                <div class="d-flex w-100 flex-column-reverse">
                    <table class="table table-hover p-2 table-sm table-striped caption-top">
                        <thead class="table-dark sticky-top" style="font-size: 14px;">
                            <tr>
                                <th scope="col">Sl.No</th>
                                <th scope="col">Checklist</th>
                                <th scope="col">Section</th>
                                <th scope="col">Weight</th>
                                <th scope="col">Item</th>
                                <th scope="col">Description</th>
                                <th scope="col">Reference Document</th>
                                <th scope="col" style="width: 300px; word-wrap: break-word;">Reference Link(URL)</th>
                                <% if (Role=="Admin" || Role=="Root" ) { %>
                                    <th scope="col" colspan="2">Status</th>
                                    <%}%>
                                        <th></th>
                            </tr>
                            <div id="loading-spinner"></div>
                        </thead>

                        <tbody id="content-area" style="font-size: 14px;">
                            <% if (Object.values(Data).length>0) { %>
                                <% for( let index=0; index < Object.values(Data).length; index++ ) { %>
                                    <tr>
                                        <td>
                                            <%= index+1%>
                                        </td>
                                        <td style="text-align: start; align-items:start;">
                                            <%= Data[index]["Checklist"] %>
                                        </td>
                                        <td style="text-align: start; align-items:start;">
                                            <%= Data[index]['Section'] %>
                                        </td>
                                        <td>
                                            <%= Data[index]['Weight'] %>
                                        </td>
                                        <td style="text-align: start; align-items:start;">
                                            <%= Data[index]['Item'] %>
                                        </td>
                                        <td style="text-align: start; align-items:start;">
                                            <%- Data[index]['Description'] %>
                                        </td>
                                        <td style="text-align: start; align-items:start;">
                                            <%= Data[index]['Reference_Document'] %>
                                        </td>
                                        <td style=" word-wrap: break-word; text-wrap:balance ;">
                                            <%= Data[index]['Reference_Link'] %>
                                        </td>

                                        <% if (Role=="Admin" || Role=="Root" ) { %>
                                            <td>
                                                <%=Data[index]['Status']%>
                                            </td>
                                            <td>
                                                <% if (Data[index]['Status']=="Active" ) { %>
                                                    <button type="button" class="btn btn-danger  ms-2"
                                                        onclick="updateStatusAPI('<%= Data[index][`Question_ID`] %>','Inactive')"><i
                                                            class="bi bi-x-circle"></i></button>
                                                    <% }else{ %>
                                                        <button type="button" class="btn btn-success  ms-2 me-2"
                                                            onclick="updateStatusAPI('<%= Data[index][`Question_ID`] %>','Active')"><i
                                                                class="bi bi-check-circle-fill"></i></button>
                                                        <% } %>
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-outline-primary"
                                                    onclick='gatherRowData(this)' id="<%= Data[index]['Question_ID'] %>"
                                                    data-bs-toggle="modal" data-bs-target="#UpdateQCModal">Edit</button>
                                            </td>
                                            <%}%>
                                    </tr>
                                    <% } %>
                                        <% } else { %>
                                            <tr>
                                                <td colspan="11">
                                                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                                                        <symbol id="check-circle-fill" viewBox="0 0 16 16">
                                                            <path
                                                                d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                                                        </symbol>
                                                        <symbol id="info-fill" viewBox="0 0 16 16">
                                                            <path
                                                                d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
                                                        </symbol>
                                                        <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
                                                            <path
                                                                d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                                                        </symbol>
                                                    </svg>
                                                    <div class="alert alert-warning alert-dismissible fade show d-flex align-items-center"
                                                        role="alert">
                                                        <svg class="bi flex-shrink-0 me-2" role="img"
                                                            aria-label="Info:">
                                                            <use xlink:href="#info-fill" />
                                                        </svg>

                                                        <strong>Sorry...!😕</strong> Data not found.
                                                        <button type="button" class="btn-close" data-bs-dismiss="alert"
                                                            aria-label="Close"></button>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td colspan="9" class="text-center">

                                                    <a href="/login" class="btn btn-outline-primary rounded-pill"><i
                                                            class="bi bi-arrow-left-circle-fill"></i> Go Back To
                                                        Home</a>

                                                </td>
                                            </tr>
                                            <% } %>
                        </tbody>
                    </table>
                </div>
    </main>
    <!-- Add QC Modal -->
    <div class="modal fade" id="UserInputModel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content ">
                <div class="modal-header">
                    <h3 class="modal-title fs-5" id="staticBackdropLabel">Add New Check Point
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form action="#" method="post" id="addQCCheckForm">
                    <div class="modal-body">
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="qc" placeholder="key" value="<%=Checklist%>"
                                readonly required>
                            <label for="qc">QC</label>
                        </div>
                        <div class="mb-3">
                            <label for="section">Select Section</label>
                            <select name="section" class="from-select form-control" id="section" aria-label="Select"
                                required onchange="CheckAddNewSection(this)">
                                <optgroup label="Select the Section">
                                    <% Sections.forEach(record=> { %>
                                        <option value="<%= record.Section %>">
                                            <%= record.Section %>
                                        </option>
                                        <% }) %>
                                </optgroup>
                                <optgroup label="___">
                                    <option value="create_new">Create New Section</option>
                                </optgroup>
                            </select>
                        </div>
                        <div class="form-floating mb-3" style="display: none;" id="new_section">
                            <input type="text" class="form-control" id="new_section_name" name="new_section_name"
                                placeholder="key">
                            <label for="new_section_name">Enter the Section Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="item" placeholder="key" required>
                            <label for="item">Enter the Item</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="Description" placeholder="key" required>
                            <label for="Description">Description</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="number" class="form-control" id="Weight" placeholder="key" value="1" min="1"
                                required>
                            <label for="Weight">Weight</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="referDocName" placeholder="key">
                            <label for="referDocName">Reference Document Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="referDocLink" placeholder="key">
                            <label for="referDocLink">Reference Document Link</label>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" id="addQCCheckbtn">Add Check Point&nbsp;<i
                                class="bi bi-send-fill"></i></button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Update QC Modal -->
    <div class="modal fade" id="UpdateQCModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content ">
                <div class="modal-header">
                    <h3 class="modal-title fs-5" id="staticBackdropLabel">Update the QC
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form action="#" method="post" id="UpdateQC">
                    <div class="modal-body">
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="updateqc" placeholder="key" readonly>
                            <input type="hidden" name="" readonly value="" id="updateID">
                            <label for="updateqc">QC</label>
                        </div>
                        <div class="mb-3">
                            <label for="updatesection">Select Section</label>
                            <select name="updatesection" class="from-select form-control" id="updatesection"
                                aria-label="Select" required>
                                <option value="" selected>Select the Section</option>
                                <% Sections.forEach(record=> { %>
                                    <option value="<%= record.Section %>">
                                        <%= record.Section %>
                                    </option>
                                    <% }) %>
                            </select>
                        </div>

                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="updateitem" placeholder="key">
                            <label for="updateitem">Item</label>
                        </div>
                        <div class=" mb-3" id="">
                            <textarea name="updateDescription" class="form-control" rows="3" id="updateDescription"
                                placeholder="key" required></textarea>
                            <!-- <input type="text" class="form-control" id="updateDescription" placeholder="key" required> -->
                            <label for="updateDescription">Description</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="number" class="form-control" id="updateweight" placeholder="key" value="1"
                                min="1" required>
                            <label for="updateweight">Weight</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="updatereferDocName" placeholder="key">
                            <label for="updatereferDocName">Reference Document Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="updatereferDocLink" placeholder="key">
                            <label for="updatereferDocLink">Reference Document Link</label>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" id="updateQCCheckbtn">Update &nbsp;<i
                                class="bi bi-send-fill"></i></button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Pdf Viewer QC Modal -->
    <div class="modal fade" id="PDFViewer" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content ">
                <div class="modal-header">
                    <h3 class="modal-title fs-5" id="staticBackdropLabel">Add New Check Point
                    </h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <iframe id="pdfPreview" width="100%" height="600"></iframe>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="uploadsupportingDoc">Upload&nbsp;<i
                            class="bi bi-send-fill"></i></button>
                </div>
            </div>
        </div>
    </div>
    <%- include('../partials/dependencies-js') %>
        <script>
            tinymce.init({
                // Select the element(s) to add TinyMCE to using any valid CSS selector
                selector: "#updateDescription",
                plugins: "preview powerpaste casechange searchreplace autolink autosave save directionality advcode visualblocks visualchars fullscreen image link media mediaembed template codesample advtable table charmap pagebreak nonbreaking anchor advlist lists checklist wordcount tinymcespellchecker a11ychecker help formatpainter permanentpen pageembed linkchecker emoticons export",
                height: '300px',
                toolbar_sticky: true,
                icons: 'thin',
                autosave_restore_when_empty: true
            });

            document.addEventListener('focusin', (e) => {
                if (e.target.closest(".tox-tinymce-aux, .moxman-window, .tam-assetmanager-root") !== null) {
                    e.stopImmediatePropagation();
                }
            });

            document.getElementById('addQCCheckForm').addEventListener("submit", async (e) => {
                e.preventDefault();
                showLoadingSpinner()
                var section = document.getElementById("section").value === 'create_new' ? document.getElementById("new_section_name").value : document.getElementById("section").value
                await axios.post('/admin/AddNewCheckPoint', {
                    params: {
                        "Checklist": document.getElementById("qc").value,
                        "Section": section,
                        "Item": document.getElementById("item").value,
                        "Description": document.getElementById("Description").value,
                        "Reference_Document": document.getElementById("referDocName").value,
                        "Reference_Link": document.getElementById("referDocLink").value,
                    }
                }).then(res => {
                    if (res.status == 200) {
                        $("#UserInputModel").modal('hide')

                        updateContentArea(res.data.Data)
                        document.getElementById("addQCCheckForm").reset();
                        alert(res.data.Message);
                        hideLoadingSpinner()
                    }
                }).catch(e => {
                    $("#UserInputModel").modal('hide')
                    hideLoadingSpinner()
                    console.log(e);
                    alert(e.response.data.Message);
                })
            })
            document.getElementById('QC-Excel-UploadForm').addEventListener("submit", async (e) => {
                e.preventDefault();
                const fileInput = document.getElementById('QCFile');
                const file = fileInput.files[0];
                let fromData = new FormData();
                fromData.append("QCFile", file)
                await axios.post('/api/uploadChecklist', fromData).then(res => {
                    if (res.status == 200) {
                        alert(res.data);
                        //updateContentArea(res.data.Data);
                    }
                }).catch(e => {
                    alert(e.response.data);
                })
            })

            function updateStatusAPI(id, newStatus) {
                axios.post('/api/updateCheckListStatus', {
                    params: {
                        id: id,
                        status: newStatus,
                        QC: '<%- Checklist %>'
                    }
                }).then(res => {
                    if (res.status == 200) {
                        updateContentArea(res.data);
                    }
                })
                    .catch(e => {
                        console.log(e);
                        alert("Unable to Update the Status...\nPlease Contact Admin");
                    })
            }

            function updateContentArea(data) {
                if (data.length > 0) {
                    $('#content-area').empty();
                    showLoadingSpinner();
                    const table = document.getElementById("content-area");
                    for (let i = 0; i < data.length; i++) {
                        table.innerHTML += `<tr>
                                    <td>${i + 1}</td>
                                    <td style="text-align: start; align-items:start;">${data[i]["Checklist"]}</td>
                                    <td style="text-align: start; align-items:start;">${data[i]["Section"]}</td>
                                    <td>${data[i]["Weight"]}</td>
                                    <td style="text-align: start; align-items:start;">${data[i]["Item"] !== null ? data[i]["Item"] : ""}</td>
                                    <td style="text-align: start; align-items:start;">${data[i]["Description"]}</td>
                                    <td style="text-align: start; align-items:start;">${data[i]["Reference_Document"] !== null ? data[i]["Reference_Document"] : ""}</td>
                                    <td style="text-align: start; align-items:start;">${data[i]["Reference_Link"] !== null ? data[i]["Reference_Link"] : ""}</td>
                                    <td>${data[i]["Status"]}</td>
                                    <td>${data[i]["Status"] === "Inactive" ?
                                `<button type="button" class="btn btn-success ms-2 me-2" onclick="updateStatusAPI('${data[i]['Question_ID']}','Active')"><i class="bi bi-check-circle-fill"></i></button>` :
                                `<button type="button" class="btn btn-danger  ms-2"  onclick="updateStatusAPI('${data[i]['Question_ID']}','Inactive')"><i class="bi bi-x-circle"></i></button>`}
                                    </td>
                                    <td> <button type="button" class="btn btn-outline-primary" onclick='gatherRowData(this)' data-bs-toggle="modal"
                                       id='${data[i]['Question_ID']}' data-bs-target="#UpdateQCModal">Edit</button>  </td>`;
                    }
                    hideLoadingSpinner();
                }
            }
            function gatherRowData(button) {
                const row = button.closest('tr'); // Get the parent tr using closest
                const cells = Array.from(row.cells); // Convert HTMLCollection to array
                var rowData = cells.map((cell) => cell.innerHTML.trim());
                rowData = rowData.slice(1, -3)
                document.getElementById("updateID").value = button.id;
                document.getElementById("updateqc").value = rowData[0];
                document.getElementById("updatesection").value = rowData[1];
                document.getElementById("updateweight").value = rowData[2];
                document.getElementById("updateitem").value = rowData[3];
                tinymce.get("updateDescription").setContent(rowData[4]);
                document.getElementById("updateDescription").value = rowData[4];
                document.getElementById("updatereferDocName").value = rowData[5];
                document.getElementById("updatereferDocLink").value = rowData[6];
            }

            document.getElementById("UpdateQC").addEventListener('submit', async (e) => {
                e.preventDefault();
                const id = document.getElementById("updateID").value;
                const qc = document.getElementById("updateqc").value;
                const sec = document.getElementById("updatesection").value;
                const item = document.getElementById("updateitem").value;
                // const desc = document.getElementById("updateDescription").value;
                const desc = tinymce.get("updateDescription").getContent();
                console.log(desc)
                const docName = document.getElementById("updatereferDocName").value;
                const docLink = document.getElementById("updatereferDocLink").value;
                const weight = document.getElementById("updateweight").value;
                axios.post(`/api/updateCheckList/${id}`, {
                    params: {
                        "Checklist": qc,
                        "Section": sec,
                        "Item": item,
                        "Description": desc,
                        "Reference_Document": docName,
                        "Reference_Link": docLink,
                        "Weight": weight
                    }
                }).then(res => {
                    if (res.status == 200) {
                        $("#UpdateQCModal").modal('hide')
                        updateContentArea(res.data);
                        document.getElementById("")
                    }
                })
                    .catch(e => {
                        $("#UpdateQCModal").modal('hide')
                        alert(e.message);
                        console.log(e)
                        //alert("Unable to Update the Checklist...\nPlease Contact Admin");
                    })
            })
            function CheckAddNewSection(e) {
                if (e.value == 'create_new') {
                    document.getElementById('new_section').style.display = 'block'
                    document.getElementById('new_section_name').setAttribute('required', '')
                } else {
                    document.getElementById('new_section_name').removeAttribute('required')

                    document.getElementById('new_section').style.display = 'none'

                }
            }
            document.getElementById('SupportingDoc').addEventListener('change', (event) => {
                const fileInput = event.target;
                if (fileInput.files.length > 0) {
                    const selectedFile = fileInput.files[0];
                    const reader = new FileReader();

                    reader.onload = (e) => {
                        const pdfData = e.target.result;
                        const pdfPreview = document.getElementById('pdfPreview');
                        pdfPreview.src = 'data:application/pdf;base64,' + btoa(new Uint8Array(pdfData).reduce((data, byte) => data + String.fromCharCode(byte), ''));
                    };
                    $('#PDFViewer').modal('show')

                    reader.readAsArrayBuffer(selectedFile);
                }
            });

            document.getElementById("uploadsupportingDoc").addEventListener("click", async (e) => {
                const fileInput = document.getElementById("SupportingDoc");
                if (fileInput.files.length > 0) {
                    var fromData = new FormData();
                    const file = fileInput.files[0];
                    fromData.append("SupportingDoc", file)
                    await axios.post('/api/UploadSupportingDoc', fromData,{
                        params:{
                            QC: '<%- Checklist %>'
                        }
                    }).then(res => {
                        if (res.status == 200) {
                            const pdfPreview = document.getElementById('pdfPreview');
                            pdfPreview.src = null;
                             $("#PDFViewer").modal('hide');
                             alert("Supporting Document Uploaded Successfully...!")
                        }
                    }).catch(e => {
                        console.log(e);
                        alert(e.response.data);
                    })
                }
            });

        </script>

        <script>

        </script>
</body>

</html>